// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtobufMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtobufMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtobufMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtobufMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtobufMessages_2eproto;
namespace messages {
class PingPong;
struct PingPongDefaultTypeInternal;
extern PingPongDefaultTypeInternal _PingPong_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class ProtobufMessage;
struct ProtobufMessageDefaultTypeInternal;
extern ProtobufMessageDefaultTypeInternal _ProtobufMessage_default_instance_;
class TrackerAdded;
struct TrackerAddedDefaultTypeInternal;
extern TrackerAddedDefaultTypeInternal _TrackerAdded_default_instance_;
class TrackerStatus;
struct TrackerStatusDefaultTypeInternal;
extern TrackerStatusDefaultTypeInternal _TrackerStatus_default_instance_;
class TrackerStatus_ExtraEntry_DoNotUse;
struct TrackerStatus_ExtraEntry_DoNotUseDefaultTypeInternal;
extern TrackerStatus_ExtraEntry_DoNotUseDefaultTypeInternal _TrackerStatus_ExtraEntry_DoNotUse_default_instance_;
class UserAction;
struct UserActionDefaultTypeInternal;
extern UserActionDefaultTypeInternal _UserAction_default_instance_;
class UserAction_ActionArgumentsEntry_DoNotUse;
struct UserAction_ActionArgumentsEntry_DoNotUseDefaultTypeInternal;
extern UserAction_ActionArgumentsEntry_DoNotUseDefaultTypeInternal _UserAction_ActionArgumentsEntry_DoNotUse_default_instance_;
}  // namespace messages
PROTOBUF_NAMESPACE_OPEN
template<> ::messages::PingPong* Arena::CreateMaybeMessage<::messages::PingPong>(Arena*);
template<> ::messages::Position* Arena::CreateMaybeMessage<::messages::Position>(Arena*);
template<> ::messages::ProtobufMessage* Arena::CreateMaybeMessage<::messages::ProtobufMessage>(Arena*);
template<> ::messages::TrackerAdded* Arena::CreateMaybeMessage<::messages::TrackerAdded>(Arena*);
template<> ::messages::TrackerStatus* Arena::CreateMaybeMessage<::messages::TrackerStatus>(Arena*);
template<> ::messages::TrackerStatus_ExtraEntry_DoNotUse* Arena::CreateMaybeMessage<::messages::TrackerStatus_ExtraEntry_DoNotUse>(Arena*);
template<> ::messages::UserAction* Arena::CreateMaybeMessage<::messages::UserAction>(Arena*);
template<> ::messages::UserAction_ActionArgumentsEntry_DoNotUse* Arena::CreateMaybeMessage<::messages::UserAction_ActionArgumentsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messages {

enum Position_DataSource : int {
  Position_DataSource_NONE = 0,
  Position_DataSource_IMU = 1,
  Position_DataSource_PRECISION = 2,
  Position_DataSource_FULL = 3,
  Position_DataSource_Position_DataSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Position_DataSource_Position_DataSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Position_DataSource_IsValid(int value);
constexpr Position_DataSource Position_DataSource_DataSource_MIN = Position_DataSource_NONE;
constexpr Position_DataSource Position_DataSource_DataSource_MAX = Position_DataSource_FULL;
constexpr int Position_DataSource_DataSource_ARRAYSIZE = Position_DataSource_DataSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Position_DataSource_descriptor();
template<typename T>
inline const std::string& Position_DataSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Position_DataSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Position_DataSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Position_DataSource_descriptor(), enum_t_value);
}
inline bool Position_DataSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Position_DataSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Position_DataSource>(
    Position_DataSource_descriptor(), name, value);
}
enum TrackerStatus_Status : int {
  TrackerStatus_Status_DISCONNECTED = 0,
  TrackerStatus_Status_OK = 1,
  TrackerStatus_Status_BUSY = 2,
  TrackerStatus_Status_ERROR = 3,
  TrackerStatus_Status_OCCLUDED = 4,
  TrackerStatus_Status_TrackerStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TrackerStatus_Status_TrackerStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TrackerStatus_Status_IsValid(int value);
constexpr TrackerStatus_Status TrackerStatus_Status_Status_MIN = TrackerStatus_Status_DISCONNECTED;
constexpr TrackerStatus_Status TrackerStatus_Status_Status_MAX = TrackerStatus_Status_OCCLUDED;
constexpr int TrackerStatus_Status_Status_ARRAYSIZE = TrackerStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackerStatus_Status_descriptor();
template<typename T>
inline const std::string& TrackerStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackerStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackerStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackerStatus_Status_descriptor(), enum_t_value);
}
inline bool TrackerStatus_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackerStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackerStatus_Status>(
    TrackerStatus_Status_descriptor(), name, value);
}
enum TrackerStatus_Confidence : int {
  TrackerStatus_Confidence_NO = 0,
  TrackerStatus_Confidence_LOW = 1,
  TrackerStatus_Confidence_MEDIUM = 5,
  TrackerStatus_Confidence_HIGH = 10,
  TrackerStatus_Confidence_TrackerStatus_Confidence_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TrackerStatus_Confidence_TrackerStatus_Confidence_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TrackerStatus_Confidence_IsValid(int value);
constexpr TrackerStatus_Confidence TrackerStatus_Confidence_Confidence_MIN = TrackerStatus_Confidence_NO;
constexpr TrackerStatus_Confidence TrackerStatus_Confidence_Confidence_MAX = TrackerStatus_Confidence_HIGH;
constexpr int TrackerStatus_Confidence_Confidence_ARRAYSIZE = TrackerStatus_Confidence_Confidence_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackerStatus_Confidence_descriptor();
template<typename T>
inline const std::string& TrackerStatus_Confidence_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackerStatus_Confidence>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackerStatus_Confidence_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackerStatus_Confidence_descriptor(), enum_t_value);
}
inline bool TrackerStatus_Confidence_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrackerStatus_Confidence* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackerStatus_Confidence>(
    TrackerStatus_Confidence_descriptor(), name, value);
}
// ===================================================================

class PingPong final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:messages.PingPong) */ {
 public:
  inline PingPong() : PingPong(nullptr) {}
  explicit constexpr PingPong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingPong(const PingPong& from);
  PingPong(PingPong&& from) noexcept
    : PingPong() {
    *this = ::std::move(from);
  }

  inline PingPong& operator=(const PingPong& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingPong& operator=(PingPong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingPong& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingPong* internal_default_instance() {
    return reinterpret_cast<const PingPong*>(
               &_PingPong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PingPong& a, PingPong& b) {
    a.Swap(&b);
  }
  inline void Swap(PingPong* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingPong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingPong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingPong>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PingPong& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PingPong& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.PingPong";
  }
  protected:
  explicit PingPong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:messages.PingPong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Position_DataSource DataSource;
  static constexpr DataSource NONE =
    Position_DataSource_NONE;
  static constexpr DataSource IMU =
    Position_DataSource_IMU;
  static constexpr DataSource PRECISION =
    Position_DataSource_PRECISION;
  static constexpr DataSource FULL =
    Position_DataSource_FULL;
  static inline bool DataSource_IsValid(int value) {
    return Position_DataSource_IsValid(value);
  }
  static constexpr DataSource DataSource_MIN =
    Position_DataSource_DataSource_MIN;
  static constexpr DataSource DataSource_MAX =
    Position_DataSource_DataSource_MAX;
  static constexpr int DataSource_ARRAYSIZE =
    Position_DataSource_DataSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataSource_descriptor() {
    return Position_DataSource_descriptor();
  }
  template<typename T>
  static inline const std::string& DataSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataSource_Name.");
    return Position_DataSource_Name(enum_t_value);
  }
  static inline bool DataSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataSource* value) {
    return Position_DataSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrackerIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kQxFieldNumber = 5,
    kQyFieldNumber = 6,
    kQzFieldNumber = 7,
    kQwFieldNumber = 8,
    kDataSourceFieldNumber = 9,
  };
  // int32 tracker_id = 1;
  void clear_tracker_id();
  int32_t tracker_id() const;
  void set_tracker_id(int32_t value);
  private:
  int32_t _internal_tracker_id() const;
  void _internal_set_tracker_id(int32_t value);
  public:

  // optional float x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 4;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float qx = 5;
  void clear_qx();
  float qx() const;
  void set_qx(float value);
  private:
  float _internal_qx() const;
  void _internal_set_qx(float value);
  public:

  // float qy = 6;
  void clear_qy();
  float qy() const;
  void set_qy(float value);
  private:
  float _internal_qy() const;
  void _internal_set_qy(float value);
  public:

  // float qz = 7;
  void clear_qz();
  float qz() const;
  void set_qz(float value);
  private:
  float _internal_qz() const;
  void _internal_set_qz(float value);
  public:

  // float qw = 8;
  void clear_qw();
  float qw() const;
  void set_qw(float value);
  private:
  float _internal_qw() const;
  void _internal_set_qw(float value);
  public:

  // optional .messages.Position.DataSource data_source = 9;
  bool has_data_source() const;
  private:
  bool _internal_has_data_source() const;
  public:
  void clear_data_source();
  ::messages::Position_DataSource data_source() const;
  void set_data_source(::messages::Position_DataSource value);
  private:
  ::messages::Position_DataSource _internal_data_source() const;
  void _internal_set_data_source(::messages::Position_DataSource value);
  public:

  // @@protoc_insertion_point(class_scope:messages.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t tracker_id_;
  float x_;
  float y_;
  float z_;
  float qx_;
  float qy_;
  float qz_;
  float qw_;
  int data_source_;
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};
// -------------------------------------------------------------------

class UserAction_ActionArgumentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserAction_ActionArgumentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserAction_ActionArgumentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  UserAction_ActionArgumentsEntry_DoNotUse();
  explicit constexpr UserAction_ActionArgumentsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UserAction_ActionArgumentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserAction_ActionArgumentsEntry_DoNotUse& other);
  static const UserAction_ActionArgumentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserAction_ActionArgumentsEntry_DoNotUse*>(&_UserAction_ActionArgumentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "messages.UserAction.ActionArgumentsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "messages.UserAction.ActionArgumentsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class UserAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.UserAction) */ {
 public:
  inline UserAction() : UserAction(nullptr) {}
  ~UserAction() override;
  explicit constexpr UserAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserAction(const UserAction& from);
  UserAction(UserAction&& from) noexcept
    : UserAction() {
    *this = ::std::move(from);
  }

  inline UserAction& operator=(const UserAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAction& operator=(UserAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserAction* internal_default_instance() {
    return reinterpret_cast<const UserAction*>(
               &_UserAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserAction& a, UserAction& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserAction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.UserAction";
  }
  protected:
  explicit UserAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kActionArgumentsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, string> action_arguments = 2;
  int action_arguments_size() const;
  private:
  int _internal_action_arguments_size() const;
  public:
  void clear_action_arguments();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_action_arguments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_action_arguments();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      action_arguments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_action_arguments();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:messages.UserAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserAction_ActionArgumentsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> action_arguments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};
// -------------------------------------------------------------------

class TrackerAdded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.TrackerAdded) */ {
 public:
  inline TrackerAdded() : TrackerAdded(nullptr) {}
  ~TrackerAdded() override;
  explicit constexpr TrackerAdded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackerAdded(const TrackerAdded& from);
  TrackerAdded(TrackerAdded&& from) noexcept
    : TrackerAdded() {
    *this = ::std::move(from);
  }

  inline TrackerAdded& operator=(const TrackerAdded& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackerAdded& operator=(TrackerAdded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackerAdded& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackerAdded* internal_default_instance() {
    return reinterpret_cast<const TrackerAdded*>(
               &_TrackerAdded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrackerAdded& a, TrackerAdded& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackerAdded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackerAdded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackerAdded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackerAdded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackerAdded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrackerAdded& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackerAdded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.TrackerAdded";
  }
  protected:
  explicit TrackerAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackerSerialFieldNumber = 2,
    kTrackerNameFieldNumber = 3,
    kTrackerIdFieldNumber = 1,
    kTrackerRoleFieldNumber = 4,
  };
  // string tracker_serial = 2;
  void clear_tracker_serial();
  const std::string& tracker_serial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tracker_serial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tracker_serial();
  PROTOBUF_NODISCARD std::string* release_tracker_serial();
  void set_allocated_tracker_serial(std::string* tracker_serial);
  private:
  const std::string& _internal_tracker_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracker_serial(const std::string& value);
  std::string* _internal_mutable_tracker_serial();
  public:

  // string tracker_name = 3;
  void clear_tracker_name();
  const std::string& tracker_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tracker_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tracker_name();
  PROTOBUF_NODISCARD std::string* release_tracker_name();
  void set_allocated_tracker_name(std::string* tracker_name);
  private:
  const std::string& _internal_tracker_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracker_name(const std::string& value);
  std::string* _internal_mutable_tracker_name();
  public:

  // int32 tracker_id = 1;
  void clear_tracker_id();
  int32_t tracker_id() const;
  void set_tracker_id(int32_t value);
  private:
  int32_t _internal_tracker_id() const;
  void _internal_set_tracker_id(int32_t value);
  public:

  // int32 tracker_role = 4;
  void clear_tracker_role();
  int32_t tracker_role() const;
  void set_tracker_role(int32_t value);
  private:
  int32_t _internal_tracker_role() const;
  void _internal_set_tracker_role(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:messages.TrackerAdded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracker_serial_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracker_name_;
  int32_t tracker_id_;
  int32_t tracker_role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};
// -------------------------------------------------------------------

class TrackerStatus_ExtraEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TrackerStatus_ExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TrackerStatus_ExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TrackerStatus_ExtraEntry_DoNotUse();
  explicit constexpr TrackerStatus_ExtraEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TrackerStatus_ExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TrackerStatus_ExtraEntry_DoNotUse& other);
  static const TrackerStatus_ExtraEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TrackerStatus_ExtraEntry_DoNotUse*>(&_TrackerStatus_ExtraEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "messages.TrackerStatus.ExtraEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "messages.TrackerStatus.ExtraEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class TrackerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.TrackerStatus) */ {
 public:
  inline TrackerStatus() : TrackerStatus(nullptr) {}
  ~TrackerStatus() override;
  explicit constexpr TrackerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackerStatus(const TrackerStatus& from);
  TrackerStatus(TrackerStatus&& from) noexcept
    : TrackerStatus() {
    *this = ::std::move(from);
  }

  inline TrackerStatus& operator=(const TrackerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackerStatus& operator=(TrackerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackerStatus* internal_default_instance() {
    return reinterpret_cast<const TrackerStatus*>(
               &_TrackerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrackerStatus& a, TrackerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrackerStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackerStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.TrackerStatus";
  }
  protected:
  explicit TrackerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef TrackerStatus_Status Status;
  static constexpr Status DISCONNECTED =
    TrackerStatus_Status_DISCONNECTED;
  static constexpr Status OK =
    TrackerStatus_Status_OK;
  static constexpr Status BUSY =
    TrackerStatus_Status_BUSY;
  static constexpr Status ERROR =
    TrackerStatus_Status_ERROR;
  static constexpr Status OCCLUDED =
    TrackerStatus_Status_OCCLUDED;
  static inline bool Status_IsValid(int value) {
    return TrackerStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TrackerStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TrackerStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TrackerStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TrackerStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TrackerStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return TrackerStatus_Status_Parse(name, value);
  }

  typedef TrackerStatus_Confidence Confidence;
  static constexpr Confidence NO =
    TrackerStatus_Confidence_NO;
  static constexpr Confidence LOW =
    TrackerStatus_Confidence_LOW;
  static constexpr Confidence MEDIUM =
    TrackerStatus_Confidence_MEDIUM;
  static constexpr Confidence HIGH =
    TrackerStatus_Confidence_HIGH;
  static inline bool Confidence_IsValid(int value) {
    return TrackerStatus_Confidence_IsValid(value);
  }
  static constexpr Confidence Confidence_MIN =
    TrackerStatus_Confidence_Confidence_MIN;
  static constexpr Confidence Confidence_MAX =
    TrackerStatus_Confidence_Confidence_MAX;
  static constexpr int Confidence_ARRAYSIZE =
    TrackerStatus_Confidence_Confidence_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Confidence_descriptor() {
    return TrackerStatus_Confidence_descriptor();
  }
  template<typename T>
  static inline const std::string& Confidence_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Confidence>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Confidence_Name.");
    return TrackerStatus_Confidence_Name(enum_t_value);
  }
  static inline bool Confidence_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Confidence* value) {
    return TrackerStatus_Confidence_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 3,
    kTrackerIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kConfidenceFieldNumber = 4,
  };
  // map<string, string> extra = 3;
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extra();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extra();

  // int32 tracker_id = 1;
  void clear_tracker_id();
  int32_t tracker_id() const;
  void set_tracker_id(int32_t value);
  private:
  int32_t _internal_tracker_id() const;
  void _internal_set_tracker_id(int32_t value);
  public:

  // .messages.TrackerStatus.Status status = 2;
  void clear_status();
  ::messages::TrackerStatus_Status status() const;
  void set_status(::messages::TrackerStatus_Status value);
  private:
  ::messages::TrackerStatus_Status _internal_status() const;
  void _internal_set_status(::messages::TrackerStatus_Status value);
  public:

  // optional .messages.TrackerStatus.Confidence confidence = 4;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  ::messages::TrackerStatus_Confidence confidence() const;
  void set_confidence(::messages::TrackerStatus_Confidence value);
  private:
  ::messages::TrackerStatus_Confidence _internal_confidence() const;
  void _internal_set_confidence(::messages::TrackerStatus_Confidence value);
  public:

  // @@protoc_insertion_point(class_scope:messages.TrackerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TrackerStatus_ExtraEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> extra_;
  int32_t tracker_id_;
  int status_;
  int confidence_;
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};
// -------------------------------------------------------------------

class ProtobufMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.ProtobufMessage) */ {
 public:
  inline ProtobufMessage() : ProtobufMessage(nullptr) {}
  ~ProtobufMessage() override;
  explicit constexpr ProtobufMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufMessage(const ProtobufMessage& from);
  ProtobufMessage(ProtobufMessage&& from) noexcept
    : ProtobufMessage() {
    *this = ::std::move(from);
  }

  inline ProtobufMessage& operator=(const ProtobufMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufMessage& operator=(ProtobufMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kPosition = 1,
    kUserAction = 2,
    kTrackerAdded = 3,
    kTrackerStatus = 4,
    MESSAGE_NOT_SET = 0,
  };

  static inline const ProtobufMessage* internal_default_instance() {
    return reinterpret_cast<const ProtobufMessage*>(
               &_ProtobufMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProtobufMessage& a, ProtobufMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtobufMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.ProtobufMessage";
  }
  protected:
  explicit ProtobufMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kUserActionFieldNumber = 2,
    kTrackerAddedFieldNumber = 3,
    kTrackerStatusFieldNumber = 4,
  };
  // .messages.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::messages::Position& position() const;
  PROTOBUF_NODISCARD ::messages::Position* release_position();
  ::messages::Position* mutable_position();
  void set_allocated_position(::messages::Position* position);
  private:
  const ::messages::Position& _internal_position() const;
  ::messages::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::messages::Position* position);
  ::messages::Position* unsafe_arena_release_position();

  // .messages.UserAction user_action = 2;
  bool has_user_action() const;
  private:
  bool _internal_has_user_action() const;
  public:
  void clear_user_action();
  const ::messages::UserAction& user_action() const;
  PROTOBUF_NODISCARD ::messages::UserAction* release_user_action();
  ::messages::UserAction* mutable_user_action();
  void set_allocated_user_action(::messages::UserAction* user_action);
  private:
  const ::messages::UserAction& _internal_user_action() const;
  ::messages::UserAction* _internal_mutable_user_action();
  public:
  void unsafe_arena_set_allocated_user_action(
      ::messages::UserAction* user_action);
  ::messages::UserAction* unsafe_arena_release_user_action();

  // .messages.TrackerAdded tracker_added = 3;
  bool has_tracker_added() const;
  private:
  bool _internal_has_tracker_added() const;
  public:
  void clear_tracker_added();
  const ::messages::TrackerAdded& tracker_added() const;
  PROTOBUF_NODISCARD ::messages::TrackerAdded* release_tracker_added();
  ::messages::TrackerAdded* mutable_tracker_added();
  void set_allocated_tracker_added(::messages::TrackerAdded* tracker_added);
  private:
  const ::messages::TrackerAdded& _internal_tracker_added() const;
  ::messages::TrackerAdded* _internal_mutable_tracker_added();
  public:
  void unsafe_arena_set_allocated_tracker_added(
      ::messages::TrackerAdded* tracker_added);
  ::messages::TrackerAdded* unsafe_arena_release_tracker_added();

  // .messages.TrackerStatus tracker_status = 4;
  bool has_tracker_status() const;
  private:
  bool _internal_has_tracker_status() const;
  public:
  void clear_tracker_status();
  const ::messages::TrackerStatus& tracker_status() const;
  PROTOBUF_NODISCARD ::messages::TrackerStatus* release_tracker_status();
  ::messages::TrackerStatus* mutable_tracker_status();
  void set_allocated_tracker_status(::messages::TrackerStatus* tracker_status);
  private:
  const ::messages::TrackerStatus& _internal_tracker_status() const;
  ::messages::TrackerStatus* _internal_mutable_tracker_status();
  public:
  void unsafe_arena_set_allocated_tracker_status(
      ::messages::TrackerStatus* tracker_status);
  ::messages::TrackerStatus* unsafe_arena_release_tracker_status();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:messages.ProtobufMessage)
 private:
  class _Internal;
  void set_has_position();
  void set_has_user_action();
  void set_has_tracker_added();
  void set_has_tracker_status();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    constexpr MessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::messages::Position* position_;
    ::messages::UserAction* user_action_;
    ::messages::TrackerAdded* tracker_added_;
    ::messages::TrackerStatus* tracker_status_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_ProtobufMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PingPong

// -------------------------------------------------------------------

// Position

// int32 tracker_id = 1;
inline void Position::clear_tracker_id() {
  tracker_id_ = 0;
}
inline int32_t Position::_internal_tracker_id() const {
  return tracker_id_;
}
inline int32_t Position::tracker_id() const {
  // @@protoc_insertion_point(field_get:messages.Position.tracker_id)
  return _internal_tracker_id();
}
inline void Position::_internal_set_tracker_id(int32_t value) {
  
  tracker_id_ = value;
}
inline void Position::set_tracker_id(int32_t value) {
  _internal_set_tracker_id(value);
  // @@protoc_insertion_point(field_set:messages.Position.tracker_id)
}

// optional float x = 2;
inline bool Position::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Position::has_x() const {
  return _internal_has_x();
}
inline void Position::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Position::_internal_x() const {
  return x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:messages.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:messages.Position.x)
}

// optional float y = 3;
inline bool Position::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Position::has_y() const {
  return _internal_has_y();
}
inline void Position::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Position::_internal_y() const {
  return y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:messages.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:messages.Position.y)
}

// optional float z = 4;
inline bool Position::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Position::has_z() const {
  return _internal_has_z();
}
inline void Position::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Position::_internal_z() const {
  return z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:messages.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:messages.Position.z)
}

// float qx = 5;
inline void Position::clear_qx() {
  qx_ = 0;
}
inline float Position::_internal_qx() const {
  return qx_;
}
inline float Position::qx() const {
  // @@protoc_insertion_point(field_get:messages.Position.qx)
  return _internal_qx();
}
inline void Position::_internal_set_qx(float value) {
  
  qx_ = value;
}
inline void Position::set_qx(float value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:messages.Position.qx)
}

// float qy = 6;
inline void Position::clear_qy() {
  qy_ = 0;
}
inline float Position::_internal_qy() const {
  return qy_;
}
inline float Position::qy() const {
  // @@protoc_insertion_point(field_get:messages.Position.qy)
  return _internal_qy();
}
inline void Position::_internal_set_qy(float value) {
  
  qy_ = value;
}
inline void Position::set_qy(float value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:messages.Position.qy)
}

// float qz = 7;
inline void Position::clear_qz() {
  qz_ = 0;
}
inline float Position::_internal_qz() const {
  return qz_;
}
inline float Position::qz() const {
  // @@protoc_insertion_point(field_get:messages.Position.qz)
  return _internal_qz();
}
inline void Position::_internal_set_qz(float value) {
  
  qz_ = value;
}
inline void Position::set_qz(float value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:messages.Position.qz)
}

// float qw = 8;
inline void Position::clear_qw() {
  qw_ = 0;
}
inline float Position::_internal_qw() const {
  return qw_;
}
inline float Position::qw() const {
  // @@protoc_insertion_point(field_get:messages.Position.qw)
  return _internal_qw();
}
inline void Position::_internal_set_qw(float value) {
  
  qw_ = value;
}
inline void Position::set_qw(float value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:messages.Position.qw)
}

// optional .messages.Position.DataSource data_source = 9;
inline bool Position::_internal_has_data_source() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Position::has_data_source() const {
  return _internal_has_data_source();
}
inline void Position::clear_data_source() {
  data_source_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::messages::Position_DataSource Position::_internal_data_source() const {
  return static_cast< ::messages::Position_DataSource >(data_source_);
}
inline ::messages::Position_DataSource Position::data_source() const {
  // @@protoc_insertion_point(field_get:messages.Position.data_source)
  return _internal_data_source();
}
inline void Position::_internal_set_data_source(::messages::Position_DataSource value) {
  _has_bits_[0] |= 0x00000008u;
  data_source_ = value;
}
inline void Position::set_data_source(::messages::Position_DataSource value) {
  _internal_set_data_source(value);
  // @@protoc_insertion_point(field_set:messages.Position.data_source)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserAction

// string name = 1;
inline void UserAction::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserAction::name() const {
  // @@protoc_insertion_point(field_get:messages.UserAction.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserAction::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messages.UserAction.name)
}
inline std::string* UserAction::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:messages.UserAction.name)
  return _s;
}
inline const std::string& UserAction::_internal_name() const {
  return name_.Get();
}
inline void UserAction::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserAction::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserAction::release_name() {
  // @@protoc_insertion_point(field_release:messages.UserAction.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserAction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messages.UserAction.name)
}

// map<string, string> action_arguments = 2;
inline int UserAction::_internal_action_arguments_size() const {
  return action_arguments_.size();
}
inline int UserAction::action_arguments_size() const {
  return _internal_action_arguments_size();
}
inline void UserAction::clear_action_arguments() {
  action_arguments_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
UserAction::_internal_action_arguments() const {
  return action_arguments_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
UserAction::action_arguments() const {
  // @@protoc_insertion_point(field_map:messages.UserAction.action_arguments)
  return _internal_action_arguments();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
UserAction::_internal_mutable_action_arguments() {
  return action_arguments_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
UserAction::mutable_action_arguments() {
  // @@protoc_insertion_point(field_mutable_map:messages.UserAction.action_arguments)
  return _internal_mutable_action_arguments();
}

// -------------------------------------------------------------------

// TrackerAdded

// int32 tracker_id = 1;
inline void TrackerAdded::clear_tracker_id() {
  tracker_id_ = 0;
}
inline int32_t TrackerAdded::_internal_tracker_id() const {
  return tracker_id_;
}
inline int32_t TrackerAdded::tracker_id() const {
  // @@protoc_insertion_point(field_get:messages.TrackerAdded.tracker_id)
  return _internal_tracker_id();
}
inline void TrackerAdded::_internal_set_tracker_id(int32_t value) {
  
  tracker_id_ = value;
}
inline void TrackerAdded::set_tracker_id(int32_t value) {
  _internal_set_tracker_id(value);
  // @@protoc_insertion_point(field_set:messages.TrackerAdded.tracker_id)
}

// string tracker_serial = 2;
inline void TrackerAdded::clear_tracker_serial() {
  tracker_serial_.ClearToEmpty();
}
inline const std::string& TrackerAdded::tracker_serial() const {
  // @@protoc_insertion_point(field_get:messages.TrackerAdded.tracker_serial)
  return _internal_tracker_serial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrackerAdded::set_tracker_serial(ArgT0&& arg0, ArgT... args) {
 
 tracker_serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messages.TrackerAdded.tracker_serial)
}
inline std::string* TrackerAdded::mutable_tracker_serial() {
  std::string* _s = _internal_mutable_tracker_serial();
  // @@protoc_insertion_point(field_mutable:messages.TrackerAdded.tracker_serial)
  return _s;
}
inline const std::string& TrackerAdded::_internal_tracker_serial() const {
  return tracker_serial_.Get();
}
inline void TrackerAdded::_internal_set_tracker_serial(const std::string& value) {
  
  tracker_serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TrackerAdded::_internal_mutable_tracker_serial() {
  
  return tracker_serial_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TrackerAdded::release_tracker_serial() {
  // @@protoc_insertion_point(field_release:messages.TrackerAdded.tracker_serial)
  return tracker_serial_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TrackerAdded::set_allocated_tracker_serial(std::string* tracker_serial) {
  if (tracker_serial != nullptr) {
    
  } else {
    
  }
  tracker_serial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tracker_serial,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tracker_serial_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tracker_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messages.TrackerAdded.tracker_serial)
}

// string tracker_name = 3;
inline void TrackerAdded::clear_tracker_name() {
  tracker_name_.ClearToEmpty();
}
inline const std::string& TrackerAdded::tracker_name() const {
  // @@protoc_insertion_point(field_get:messages.TrackerAdded.tracker_name)
  return _internal_tracker_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrackerAdded::set_tracker_name(ArgT0&& arg0, ArgT... args) {
 
 tracker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messages.TrackerAdded.tracker_name)
}
inline std::string* TrackerAdded::mutable_tracker_name() {
  std::string* _s = _internal_mutable_tracker_name();
  // @@protoc_insertion_point(field_mutable:messages.TrackerAdded.tracker_name)
  return _s;
}
inline const std::string& TrackerAdded::_internal_tracker_name() const {
  return tracker_name_.Get();
}
inline void TrackerAdded::_internal_set_tracker_name(const std::string& value) {
  
  tracker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TrackerAdded::_internal_mutable_tracker_name() {
  
  return tracker_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TrackerAdded::release_tracker_name() {
  // @@protoc_insertion_point(field_release:messages.TrackerAdded.tracker_name)
  return tracker_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TrackerAdded::set_allocated_tracker_name(std::string* tracker_name) {
  if (tracker_name != nullptr) {
    
  } else {
    
  }
  tracker_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tracker_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tracker_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tracker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messages.TrackerAdded.tracker_name)
}

// int32 tracker_role = 4;
inline void TrackerAdded::clear_tracker_role() {
  tracker_role_ = 0;
}
inline int32_t TrackerAdded::_internal_tracker_role() const {
  return tracker_role_;
}
inline int32_t TrackerAdded::tracker_role() const {
  // @@protoc_insertion_point(field_get:messages.TrackerAdded.tracker_role)
  return _internal_tracker_role();
}
inline void TrackerAdded::_internal_set_tracker_role(int32_t value) {
  
  tracker_role_ = value;
}
inline void TrackerAdded::set_tracker_role(int32_t value) {
  _internal_set_tracker_role(value);
  // @@protoc_insertion_point(field_set:messages.TrackerAdded.tracker_role)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TrackerStatus

// int32 tracker_id = 1;
inline void TrackerStatus::clear_tracker_id() {
  tracker_id_ = 0;
}
inline int32_t TrackerStatus::_internal_tracker_id() const {
  return tracker_id_;
}
inline int32_t TrackerStatus::tracker_id() const {
  // @@protoc_insertion_point(field_get:messages.TrackerStatus.tracker_id)
  return _internal_tracker_id();
}
inline void TrackerStatus::_internal_set_tracker_id(int32_t value) {
  
  tracker_id_ = value;
}
inline void TrackerStatus::set_tracker_id(int32_t value) {
  _internal_set_tracker_id(value);
  // @@protoc_insertion_point(field_set:messages.TrackerStatus.tracker_id)
}

// .messages.TrackerStatus.Status status = 2;
inline void TrackerStatus::clear_status() {
  status_ = 0;
}
inline ::messages::TrackerStatus_Status TrackerStatus::_internal_status() const {
  return static_cast< ::messages::TrackerStatus_Status >(status_);
}
inline ::messages::TrackerStatus_Status TrackerStatus::status() const {
  // @@protoc_insertion_point(field_get:messages.TrackerStatus.status)
  return _internal_status();
}
inline void TrackerStatus::_internal_set_status(::messages::TrackerStatus_Status value) {
  
  status_ = value;
}
inline void TrackerStatus::set_status(::messages::TrackerStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:messages.TrackerStatus.status)
}

// map<string, string> extra = 3;
inline int TrackerStatus::_internal_extra_size() const {
  return extra_.size();
}
inline int TrackerStatus::extra_size() const {
  return _internal_extra_size();
}
inline void TrackerStatus::clear_extra() {
  extra_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TrackerStatus::_internal_extra() const {
  return extra_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TrackerStatus::extra() const {
  // @@protoc_insertion_point(field_map:messages.TrackerStatus.extra)
  return _internal_extra();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TrackerStatus::_internal_mutable_extra() {
  return extra_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TrackerStatus::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_map:messages.TrackerStatus.extra)
  return _internal_mutable_extra();
}

// optional .messages.TrackerStatus.Confidence confidence = 4;
inline bool TrackerStatus::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackerStatus::has_confidence() const {
  return _internal_has_confidence();
}
inline void TrackerStatus::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::messages::TrackerStatus_Confidence TrackerStatus::_internal_confidence() const {
  return static_cast< ::messages::TrackerStatus_Confidence >(confidence_);
}
inline ::messages::TrackerStatus_Confidence TrackerStatus::confidence() const {
  // @@protoc_insertion_point(field_get:messages.TrackerStatus.confidence)
  return _internal_confidence();
}
inline void TrackerStatus::_internal_set_confidence(::messages::TrackerStatus_Confidence value) {
  _has_bits_[0] |= 0x00000001u;
  confidence_ = value;
}
inline void TrackerStatus::set_confidence(::messages::TrackerStatus_Confidence value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:messages.TrackerStatus.confidence)
}

// -------------------------------------------------------------------

// ProtobufMessage

// .messages.Position position = 1;
inline bool ProtobufMessage::_internal_has_position() const {
  return message_case() == kPosition;
}
inline bool ProtobufMessage::has_position() const {
  return _internal_has_position();
}
inline void ProtobufMessage::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void ProtobufMessage::clear_position() {
  if (_internal_has_position()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.position_;
    }
    clear_has_message();
  }
}
inline ::messages::Position* ProtobufMessage::release_position() {
  // @@protoc_insertion_point(field_release:messages.ProtobufMessage.position)
  if (_internal_has_position()) {
    clear_has_message();
      ::messages::Position* temp = message_.position_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::messages::Position& ProtobufMessage::_internal_position() const {
  return _internal_has_position()
      ? *message_.position_
      : reinterpret_cast< ::messages::Position&>(::messages::_Position_default_instance_);
}
inline const ::messages::Position& ProtobufMessage::position() const {
  // @@protoc_insertion_point(field_get:messages.ProtobufMessage.position)
  return _internal_position();
}
inline ::messages::Position* ProtobufMessage::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ProtobufMessage.position)
  if (_internal_has_position()) {
    clear_has_message();
    ::messages::Position* temp = message_.position_;
    message_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufMessage::unsafe_arena_set_allocated_position(::messages::Position* position) {
  clear_message();
  if (position) {
    set_has_position();
    message_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ProtobufMessage.position)
}
inline ::messages::Position* ProtobufMessage::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_message();
    set_has_position();
    message_.position_ = CreateMaybeMessage< ::messages::Position >(GetArenaForAllocation());
  }
  return message_.position_;
}
inline ::messages::Position* ProtobufMessage::mutable_position() {
  ::messages::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:messages.ProtobufMessage.position)
  return _msg;
}

// .messages.UserAction user_action = 2;
inline bool ProtobufMessage::_internal_has_user_action() const {
  return message_case() == kUserAction;
}
inline bool ProtobufMessage::has_user_action() const {
  return _internal_has_user_action();
}
inline void ProtobufMessage::set_has_user_action() {
  _oneof_case_[0] = kUserAction;
}
inline void ProtobufMessage::clear_user_action() {
  if (_internal_has_user_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.user_action_;
    }
    clear_has_message();
  }
}
inline ::messages::UserAction* ProtobufMessage::release_user_action() {
  // @@protoc_insertion_point(field_release:messages.ProtobufMessage.user_action)
  if (_internal_has_user_action()) {
    clear_has_message();
      ::messages::UserAction* temp = message_.user_action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.user_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::messages::UserAction& ProtobufMessage::_internal_user_action() const {
  return _internal_has_user_action()
      ? *message_.user_action_
      : reinterpret_cast< ::messages::UserAction&>(::messages::_UserAction_default_instance_);
}
inline const ::messages::UserAction& ProtobufMessage::user_action() const {
  // @@protoc_insertion_point(field_get:messages.ProtobufMessage.user_action)
  return _internal_user_action();
}
inline ::messages::UserAction* ProtobufMessage::unsafe_arena_release_user_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ProtobufMessage.user_action)
  if (_internal_has_user_action()) {
    clear_has_message();
    ::messages::UserAction* temp = message_.user_action_;
    message_.user_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufMessage::unsafe_arena_set_allocated_user_action(::messages::UserAction* user_action) {
  clear_message();
  if (user_action) {
    set_has_user_action();
    message_.user_action_ = user_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ProtobufMessage.user_action)
}
inline ::messages::UserAction* ProtobufMessage::_internal_mutable_user_action() {
  if (!_internal_has_user_action()) {
    clear_message();
    set_has_user_action();
    message_.user_action_ = CreateMaybeMessage< ::messages::UserAction >(GetArenaForAllocation());
  }
  return message_.user_action_;
}
inline ::messages::UserAction* ProtobufMessage::mutable_user_action() {
  ::messages::UserAction* _msg = _internal_mutable_user_action();
  // @@protoc_insertion_point(field_mutable:messages.ProtobufMessage.user_action)
  return _msg;
}

// .messages.TrackerAdded tracker_added = 3;
inline bool ProtobufMessage::_internal_has_tracker_added() const {
  return message_case() == kTrackerAdded;
}
inline bool ProtobufMessage::has_tracker_added() const {
  return _internal_has_tracker_added();
}
inline void ProtobufMessage::set_has_tracker_added() {
  _oneof_case_[0] = kTrackerAdded;
}
inline void ProtobufMessage::clear_tracker_added() {
  if (_internal_has_tracker_added()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.tracker_added_;
    }
    clear_has_message();
  }
}
inline ::messages::TrackerAdded* ProtobufMessage::release_tracker_added() {
  // @@protoc_insertion_point(field_release:messages.ProtobufMessage.tracker_added)
  if (_internal_has_tracker_added()) {
    clear_has_message();
      ::messages::TrackerAdded* temp = message_.tracker_added_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.tracker_added_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::messages::TrackerAdded& ProtobufMessage::_internal_tracker_added() const {
  return _internal_has_tracker_added()
      ? *message_.tracker_added_
      : reinterpret_cast< ::messages::TrackerAdded&>(::messages::_TrackerAdded_default_instance_);
}
inline const ::messages::TrackerAdded& ProtobufMessage::tracker_added() const {
  // @@protoc_insertion_point(field_get:messages.ProtobufMessage.tracker_added)
  return _internal_tracker_added();
}
inline ::messages::TrackerAdded* ProtobufMessage::unsafe_arena_release_tracker_added() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ProtobufMessage.tracker_added)
  if (_internal_has_tracker_added()) {
    clear_has_message();
    ::messages::TrackerAdded* temp = message_.tracker_added_;
    message_.tracker_added_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufMessage::unsafe_arena_set_allocated_tracker_added(::messages::TrackerAdded* tracker_added) {
  clear_message();
  if (tracker_added) {
    set_has_tracker_added();
    message_.tracker_added_ = tracker_added;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ProtobufMessage.tracker_added)
}
inline ::messages::TrackerAdded* ProtobufMessage::_internal_mutable_tracker_added() {
  if (!_internal_has_tracker_added()) {
    clear_message();
    set_has_tracker_added();
    message_.tracker_added_ = CreateMaybeMessage< ::messages::TrackerAdded >(GetArenaForAllocation());
  }
  return message_.tracker_added_;
}
inline ::messages::TrackerAdded* ProtobufMessage::mutable_tracker_added() {
  ::messages::TrackerAdded* _msg = _internal_mutable_tracker_added();
  // @@protoc_insertion_point(field_mutable:messages.ProtobufMessage.tracker_added)
  return _msg;
}

// .messages.TrackerStatus tracker_status = 4;
inline bool ProtobufMessage::_internal_has_tracker_status() const {
  return message_case() == kTrackerStatus;
}
inline bool ProtobufMessage::has_tracker_status() const {
  return _internal_has_tracker_status();
}
inline void ProtobufMessage::set_has_tracker_status() {
  _oneof_case_[0] = kTrackerStatus;
}
inline void ProtobufMessage::clear_tracker_status() {
  if (_internal_has_tracker_status()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.tracker_status_;
    }
    clear_has_message();
  }
}
inline ::messages::TrackerStatus* ProtobufMessage::release_tracker_status() {
  // @@protoc_insertion_point(field_release:messages.ProtobufMessage.tracker_status)
  if (_internal_has_tracker_status()) {
    clear_has_message();
      ::messages::TrackerStatus* temp = message_.tracker_status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.tracker_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::messages::TrackerStatus& ProtobufMessage::_internal_tracker_status() const {
  return _internal_has_tracker_status()
      ? *message_.tracker_status_
      : reinterpret_cast< ::messages::TrackerStatus&>(::messages::_TrackerStatus_default_instance_);
}
inline const ::messages::TrackerStatus& ProtobufMessage::tracker_status() const {
  // @@protoc_insertion_point(field_get:messages.ProtobufMessage.tracker_status)
  return _internal_tracker_status();
}
inline ::messages::TrackerStatus* ProtobufMessage::unsafe_arena_release_tracker_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ProtobufMessage.tracker_status)
  if (_internal_has_tracker_status()) {
    clear_has_message();
    ::messages::TrackerStatus* temp = message_.tracker_status_;
    message_.tracker_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufMessage::unsafe_arena_set_allocated_tracker_status(::messages::TrackerStatus* tracker_status) {
  clear_message();
  if (tracker_status) {
    set_has_tracker_status();
    message_.tracker_status_ = tracker_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ProtobufMessage.tracker_status)
}
inline ::messages::TrackerStatus* ProtobufMessage::_internal_mutable_tracker_status() {
  if (!_internal_has_tracker_status()) {
    clear_message();
    set_has_tracker_status();
    message_.tracker_status_ = CreateMaybeMessage< ::messages::TrackerStatus >(GetArenaForAllocation());
  }
  return message_.tracker_status_;
}
inline ::messages::TrackerStatus* ProtobufMessage::mutable_tracker_status() {
  ::messages::TrackerStatus* _msg = _internal_mutable_tracker_status();
  // @@protoc_insertion_point(field_mutable:messages.ProtobufMessage.tracker_status)
  return _msg;
}

inline bool ProtobufMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ProtobufMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ProtobufMessage::MessageCase ProtobufMessage::message_case() const {
  return ProtobufMessage::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::messages::Position_DataSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::Position_DataSource>() {
  return ::messages::Position_DataSource_descriptor();
}
template <> struct is_proto_enum< ::messages::TrackerStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::TrackerStatus_Status>() {
  return ::messages::TrackerStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::messages::TrackerStatus_Confidence> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::TrackerStatus_Confidence>() {
  return ::messages::TrackerStatus_Confidence_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtobufMessages_2eproto
