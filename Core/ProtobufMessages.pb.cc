// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufMessages.proto

#include "ProtobufMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace messages {
constexpr PingPong::PingPong(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PingPongDefaultTypeInternal {
  constexpr PingPongDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingPongDefaultTypeInternal() {}
  union {
    PingPong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingPongDefaultTypeInternal _PingPong_default_instance_;
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tracker_id_(0)
  , x_(0)
  , y_(0)
  , z_(0)
  , qx_(0)
  , qy_(0)
  , qz_(0)
  , qw_(0)
  , data_source_(0)
{}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr UserAction_ActionArgumentsEntry_DoNotUse::UserAction_ActionArgumentsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UserAction_ActionArgumentsEntry_DoNotUseDefaultTypeInternal {
  constexpr UserAction_ActionArgumentsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserAction_ActionArgumentsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UserAction_ActionArgumentsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserAction_ActionArgumentsEntry_DoNotUseDefaultTypeInternal _UserAction_ActionArgumentsEntry_DoNotUse_default_instance_;
constexpr UserAction::UserAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_arguments_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserActionDefaultTypeInternal {
  constexpr UserActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserActionDefaultTypeInternal() {}
  union {
    UserAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserActionDefaultTypeInternal _UserAction_default_instance_;
constexpr TrackerAdded::TrackerAdded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tracker_serial_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tracker_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tracker_id_(0)
  , tracker_role_(0){}
struct TrackerAddedDefaultTypeInternal {
  constexpr TrackerAddedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackerAddedDefaultTypeInternal() {}
  union {
    TrackerAdded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackerAddedDefaultTypeInternal _TrackerAdded_default_instance_;
constexpr TrackerStatus_ExtraEntry_DoNotUse::TrackerStatus_ExtraEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TrackerStatus_ExtraEntry_DoNotUseDefaultTypeInternal {
  constexpr TrackerStatus_ExtraEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackerStatus_ExtraEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TrackerStatus_ExtraEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackerStatus_ExtraEntry_DoNotUseDefaultTypeInternal _TrackerStatus_ExtraEntry_DoNotUse_default_instance_;
constexpr TrackerStatus::TrackerStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extra_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , tracker_id_(0)
  , status_(0)

  , confidence_(0)
{}
struct TrackerStatusDefaultTypeInternal {
  constexpr TrackerStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackerStatusDefaultTypeInternal() {}
  union {
    TrackerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackerStatusDefaultTypeInternal _TrackerStatus_default_instance_;
constexpr ProtobufMessage::ProtobufMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ProtobufMessageDefaultTypeInternal {
  constexpr ProtobufMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtobufMessageDefaultTypeInternal() {}
  union {
    ProtobufMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtobufMessageDefaultTypeInternal _ProtobufMessage_default_instance_;
}  // namespace messages
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProtobufMessages_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ProtobufMessages_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProtobufMessages_2eproto = nullptr;

const uint32_t TableStruct_ProtobufMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messages::PingPong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::messages::Position, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::messages::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::messages::Position, tracker_id_),
  PROTOBUF_FIELD_OFFSET(::messages::Position, x_),
  PROTOBUF_FIELD_OFFSET(::messages::Position, y_),
  PROTOBUF_FIELD_OFFSET(::messages::Position, z_),
  PROTOBUF_FIELD_OFFSET(::messages::Position, qx_),
  PROTOBUF_FIELD_OFFSET(::messages::Position, qy_),
  PROTOBUF_FIELD_OFFSET(::messages::Position, qz_),
  PROTOBUF_FIELD_OFFSET(::messages::Position, qw_),
  PROTOBUF_FIELD_OFFSET(::messages::Position, data_source_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::messages::UserAction_ActionArgumentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::messages::UserAction_ActionArgumentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::messages::UserAction_ActionArgumentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::messages::UserAction_ActionArgumentsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messages::UserAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::messages::UserAction, name_),
  PROTOBUF_FIELD_OFFSET(::messages::UserAction, action_arguments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messages::TrackerAdded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::messages::TrackerAdded, tracker_id_),
  PROTOBUF_FIELD_OFFSET(::messages::TrackerAdded, tracker_serial_),
  PROTOBUF_FIELD_OFFSET(::messages::TrackerAdded, tracker_name_),
  PROTOBUF_FIELD_OFFSET(::messages::TrackerAdded, tracker_role_),
  PROTOBUF_FIELD_OFFSET(::messages::TrackerStatus_ExtraEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::messages::TrackerStatus_ExtraEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::messages::TrackerStatus_ExtraEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::messages::TrackerStatus_ExtraEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::messages::TrackerStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::messages::TrackerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::messages::TrackerStatus, tracker_id_),
  PROTOBUF_FIELD_OFFSET(::messages::TrackerStatus, status_),
  PROTOBUF_FIELD_OFFSET(::messages::TrackerStatus, extra_),
  PROTOBUF_FIELD_OFFSET(::messages::TrackerStatus, confidence_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messages::ProtobufMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::messages::ProtobufMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::messages::ProtobufMessage, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::messages::PingPong)},
  { 6, 21, -1, sizeof(::messages::Position)},
  { 30, 38, -1, sizeof(::messages::UserAction_ActionArgumentsEntry_DoNotUse)},
  { 40, -1, -1, sizeof(::messages::UserAction)},
  { 48, -1, -1, sizeof(::messages::TrackerAdded)},
  { 58, 66, -1, sizeof(::messages::TrackerStatus_ExtraEntry_DoNotUse)},
  { 68, 78, -1, sizeof(::messages::TrackerStatus)},
  { 82, -1, -1, sizeof(::messages::ProtobufMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messages::_PingPong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messages::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messages::_UserAction_ActionArgumentsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messages::_UserAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messages::_TrackerAdded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messages::_TrackerStatus_ExtraEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messages::_TrackerStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messages::_ProtobufMessage_default_instance_),
};

const char descriptor_table_protodef_ProtobufMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026ProtobufMessages.proto\022\010messages\"\n\n\010Pi"
  "ngPong\"\223\002\n\010Position\022\022\n\ntracker_id\030\001 \001(\005\022"
  "\016\n\001x\030\002 \001(\002H\000\210\001\001\022\016\n\001y\030\003 \001(\002H\001\210\001\001\022\016\n\001z\030\004 \001"
  "(\002H\002\210\001\001\022\n\n\002qx\030\005 \001(\002\022\n\n\002qy\030\006 \001(\002\022\n\n\002qz\030\007 "
  "\001(\002\022\n\n\002qw\030\010 \001(\002\0227\n\013data_source\030\t \001(\0162\035.m"
  "essages.Position.DataSourceH\003\210\001\001\"8\n\nData"
  "Source\022\010\n\004NONE\020\000\022\007\n\003IMU\020\001\022\r\n\tPRECISION\020\002"
  "\022\010\n\004FULL\020\003B\004\n\002_xB\004\n\002_yB\004\n\002_zB\016\n\014_data_so"
  "urce\"\227\001\n\nUserAction\022\014\n\004name\030\001 \001(\t\022C\n\020act"
  "ion_arguments\030\002 \003(\0132).messages.UserActio"
  "n.ActionArgumentsEntry\0326\n\024ActionArgument"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"f"
  "\n\014TrackerAdded\022\022\n\ntracker_id\030\001 \001(\005\022\026\n\016tr"
  "acker_serial\030\002 \001(\t\022\024\n\014tracker_name\030\003 \001(\t"
  "\022\024\n\014tracker_role\030\004 \001(\005\"\374\002\n\rTrackerStatus"
  "\022\022\n\ntracker_id\030\001 \001(\005\022.\n\006status\030\002 \001(\0162\036.m"
  "essages.TrackerStatus.Status\0221\n\005extra\030\003 "
  "\003(\0132\".messages.TrackerStatus.ExtraEntry\022"
  ";\n\nconfidence\030\004 \001(\0162\".messages.TrackerSt"
  "atus.ConfidenceH\000\210\001\001\032,\n\nExtraEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"E\n\006Status\022\020\n\014"
  "DISCONNECTED\020\000\022\006\n\002OK\020\001\022\010\n\004BUSY\020\002\022\t\n\005ERRO"
  "R\020\003\022\014\n\010OCCLUDED\020\004\"3\n\nConfidence\022\006\n\002NO\020\000\022"
  "\007\n\003LOW\020\001\022\n\n\006MEDIUM\020\005\022\010\n\004HIGH\020\nB\r\n\013_confi"
  "dence\"\325\001\n\017ProtobufMessage\022&\n\010position\030\001 "
  "\001(\0132\022.messages.PositionH\000\022+\n\013user_action"
  "\030\002 \001(\0132\024.messages.UserActionH\000\022/\n\rtracke"
  "r_added\030\003 \001(\0132\026.messages.TrackerAddedH\000\022"
  "1\n\016tracker_status\030\004 \001(\0132\027.messages.Track"
  "erStatusH\000B\t\n\007messageB&\n\022dev.slimevr.bri"
  "dgeB\020ProtobufMessagesb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProtobufMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtobufMessages_2eproto = {
  false, false, 1229, descriptor_table_protodef_ProtobufMessages_2eproto, "ProtobufMessages.proto", 
  &descriptor_table_ProtobufMessages_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_ProtobufMessages_2eproto::offsets,
  file_level_metadata_ProtobufMessages_2eproto, file_level_enum_descriptors_ProtobufMessages_2eproto, file_level_service_descriptors_ProtobufMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ProtobufMessages_2eproto_getter() {
  return &descriptor_table_ProtobufMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ProtobufMessages_2eproto(&descriptor_table_ProtobufMessages_2eproto);
namespace messages {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Position_DataSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtobufMessages_2eproto);
  return file_level_enum_descriptors_ProtobufMessages_2eproto[0];
}
bool Position_DataSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Position_DataSource Position::NONE;
constexpr Position_DataSource Position::IMU;
constexpr Position_DataSource Position::PRECISION;
constexpr Position_DataSource Position::FULL;
constexpr Position_DataSource Position::DataSource_MIN;
constexpr Position_DataSource Position::DataSource_MAX;
constexpr int Position::DataSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackerStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtobufMessages_2eproto);
  return file_level_enum_descriptors_ProtobufMessages_2eproto[1];
}
bool TrackerStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrackerStatus_Status TrackerStatus::DISCONNECTED;
constexpr TrackerStatus_Status TrackerStatus::OK;
constexpr TrackerStatus_Status TrackerStatus::BUSY;
constexpr TrackerStatus_Status TrackerStatus::ERROR;
constexpr TrackerStatus_Status TrackerStatus::OCCLUDED;
constexpr TrackerStatus_Status TrackerStatus::Status_MIN;
constexpr TrackerStatus_Status TrackerStatus::Status_MAX;
constexpr int TrackerStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackerStatus_Confidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtobufMessages_2eproto);
  return file_level_enum_descriptors_ProtobufMessages_2eproto[2];
}
bool TrackerStatus_Confidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 5:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrackerStatus_Confidence TrackerStatus::NO;
constexpr TrackerStatus_Confidence TrackerStatus::LOW;
constexpr TrackerStatus_Confidence TrackerStatus::MEDIUM;
constexpr TrackerStatus_Confidence TrackerStatus::HIGH;
constexpr TrackerStatus_Confidence TrackerStatus::Confidence_MIN;
constexpr TrackerStatus_Confidence TrackerStatus::Confidence_MAX;
constexpr int TrackerStatus::Confidence_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PingPong::_Internal {
 public:
};

PingPong::PingPong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:messages.PingPong)
}
PingPong::PingPong(const PingPong& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:messages.PingPong)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingPong::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingPong::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PingPong::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtobufMessages_2eproto_getter, &descriptor_table_ProtobufMessages_2eproto_once,
      file_level_metadata_ProtobufMessages_2eproto[0]);
}

// ===================================================================

class Position::_Internal {
 public:
  using HasBits = decltype(std::declval<Position>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messages.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tracker_id_, &from.tracker_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_source_) -
    reinterpret_cast<char*>(&tracker_id_)) + sizeof(data_source_));
  // @@protoc_insertion_point(copy_constructor:messages.Position)
}

inline void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tracker_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_source_) -
    reinterpret_cast<char*>(&tracker_id_)) + sizeof(data_source_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:messages.Position)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracker_id_ = 0;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  ::memset(&qx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_) -
      reinterpret_cast<char*>(&qx_)) + sizeof(qw_));
  data_source_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tracker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tracker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float qx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float qy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float qz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float qw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .messages.Position.DataSource data_source = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_source(static_cast<::messages::Position_DataSource>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tracker_id = 1;
  if (this->_internal_tracker_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tracker_id(), target);
  }

  // optional float x = 2;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // optional float y = 3;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // optional float z = 4;
  if (_internal_has_z()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float qx = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qx = this->_internal_qx();
  uint32_t raw_qx;
  memcpy(&raw_qx, &tmp_qx, sizeof(tmp_qx));
  if (raw_qx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_qx(), target);
  }

  // float qy = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qy = this->_internal_qy();
  uint32_t raw_qy;
  memcpy(&raw_qy, &tmp_qy, sizeof(tmp_qy));
  if (raw_qy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_qy(), target);
  }

  // float qz = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qz = this->_internal_qz();
  uint32_t raw_qz;
  memcpy(&raw_qz, &tmp_qz, sizeof(tmp_qz));
  if (raw_qz != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_qz(), target);
  }

  // float qw = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qw = this->_internal_qw();
  uint32_t raw_qw;
  memcpy(&raw_qw, &tmp_qw, sizeof(tmp_qw));
  if (raw_qw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_qw(), target);
  }

  // optional .messages.Position.DataSource data_source = 9;
  if (_internal_has_data_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_data_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messages.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tracker_id = 1;
  if (this->_internal_tracker_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tracker_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  // float qx = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qx = this->_internal_qx();
  uint32_t raw_qx;
  memcpy(&raw_qx, &tmp_qx, sizeof(tmp_qx));
  if (raw_qx != 0) {
    total_size += 1 + 4;
  }

  // float qy = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qy = this->_internal_qy();
  uint32_t raw_qy;
  memcpy(&raw_qy, &tmp_qy, sizeof(tmp_qy));
  if (raw_qy != 0) {
    total_size += 1 + 4;
  }

  // float qz = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qz = this->_internal_qz();
  uint32_t raw_qz;
  memcpy(&raw_qz, &tmp_qz, sizeof(tmp_qz));
  if (raw_qz != 0) {
    total_size += 1 + 4;
  }

  // float qw = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qw = this->_internal_qw();
  uint32_t raw_qw;
  memcpy(&raw_qw, &tmp_qw, sizeof(tmp_qw));
  if (raw_qw != 0) {
    total_size += 1 + 4;
  }

  // optional .messages.Position.DataSource data_source = 9;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }

void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Position *>(to)->MergeFrom(
      static_cast<const Position &>(from));
}


void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.Position)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tracker_id() != 0) {
    _internal_set_tracker_id(from._internal_tracker_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qx = from._internal_qx();
  uint32_t raw_qx;
  memcpy(&raw_qx, &tmp_qx, sizeof(tmp_qx));
  if (raw_qx != 0) {
    _internal_set_qx(from._internal_qx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qy = from._internal_qy();
  uint32_t raw_qy;
  memcpy(&raw_qy, &tmp_qy, sizeof(tmp_qy));
  if (raw_qy != 0) {
    _internal_set_qy(from._internal_qy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qz = from._internal_qz();
  uint32_t raw_qz;
  memcpy(&raw_qz, &tmp_qz, sizeof(tmp_qz));
  if (raw_qz != 0) {
    _internal_set_qz(from._internal_qz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qw = from._internal_qw();
  uint32_t raw_qw;
  memcpy(&raw_qw, &tmp_qw, sizeof(tmp_qw));
  if (raw_qw != 0) {
    _internal_set_qw(from._internal_qw());
  }
  if (cached_has_bits & 0x00000008u) {
    _internal_set_data_source(from._internal_data_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, data_source_)
      + sizeof(Position::data_source_)
      - PROTOBUF_FIELD_OFFSET(Position, tracker_id_)>(
          reinterpret_cast<char*>(&tracker_id_),
          reinterpret_cast<char*>(&other->tracker_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtobufMessages_2eproto_getter, &descriptor_table_ProtobufMessages_2eproto_once,
      file_level_metadata_ProtobufMessages_2eproto[1]);
}

// ===================================================================

UserAction_ActionArgumentsEntry_DoNotUse::UserAction_ActionArgumentsEntry_DoNotUse() {}
UserAction_ActionArgumentsEntry_DoNotUse::UserAction_ActionArgumentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserAction_ActionArgumentsEntry_DoNotUse::MergeFrom(const UserAction_ActionArgumentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserAction_ActionArgumentsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtobufMessages_2eproto_getter, &descriptor_table_ProtobufMessages_2eproto_once,
      file_level_metadata_ProtobufMessages_2eproto[2]);
}

// ===================================================================

class UserAction::_Internal {
 public:
};

UserAction::UserAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  action_arguments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messages.UserAction)
}
UserAction::UserAction(const UserAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_arguments_.MergeFrom(from.action_arguments_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:messages.UserAction)
}

inline void UserAction::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserAction::~UserAction() {
  // @@protoc_insertion_point(destructor:messages.UserAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserAction::ArenaDtor(void* object) {
  UserAction* _this = reinterpret_cast< UserAction* >(object);
  (void)_this;
  _this->action_arguments_. ~MapField();
}
inline void UserAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &UserAction::ArenaDtor);
  }
}
void UserAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserAction::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.UserAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_arguments_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "messages.UserAction.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> action_arguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&action_arguments_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.UserAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "messages.UserAction.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> action_arguments = 2;
  if (!this->_internal_action_arguments().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "messages.UserAction.ActionArgumentsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "messages.UserAction.ActionArgumentsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_action_arguments().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_action_arguments().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_action_arguments().begin();
          it != this->_internal_action_arguments().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UserAction_ActionArgumentsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_action_arguments().begin();
          it != this->_internal_action_arguments().end(); ++it) {
        target = UserAction_ActionArgumentsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messages.UserAction)
  return target;
}

size_t UserAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.UserAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> action_arguments = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_action_arguments_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_action_arguments().begin();
      it != this->_internal_action_arguments().end(); ++it) {
    total_size += UserAction_ActionArgumentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserAction::GetClassData() const { return &_class_data_; }

void UserAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserAction *>(to)->MergeFrom(
      static_cast<const UserAction &>(from));
}


void UserAction::MergeFrom(const UserAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.UserAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  action_arguments_.MergeFrom(from.action_arguments_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserAction::CopyFrom(const UserAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.UserAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAction::IsInitialized() const {
  return true;
}

void UserAction::InternalSwap(UserAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  action_arguments_.InternalSwap(&other->action_arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtobufMessages_2eproto_getter, &descriptor_table_ProtobufMessages_2eproto_once,
      file_level_metadata_ProtobufMessages_2eproto[3]);
}

// ===================================================================

class TrackerAdded::_Internal {
 public:
};

TrackerAdded::TrackerAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messages.TrackerAdded)
}
TrackerAdded::TrackerAdded(const TrackerAdded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tracker_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tracker_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tracker_serial().empty()) {
    tracker_serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tracker_serial(), 
      GetArenaForAllocation());
  }
  tracker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tracker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tracker_name().empty()) {
    tracker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tracker_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&tracker_id_, &from.tracker_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracker_role_) -
    reinterpret_cast<char*>(&tracker_id_)) + sizeof(tracker_role_));
  // @@protoc_insertion_point(copy_constructor:messages.TrackerAdded)
}

inline void TrackerAdded::SharedCtor() {
tracker_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tracker_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tracker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tracker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tracker_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tracker_role_) -
    reinterpret_cast<char*>(&tracker_id_)) + sizeof(tracker_role_));
}

TrackerAdded::~TrackerAdded() {
  // @@protoc_insertion_point(destructor:messages.TrackerAdded)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrackerAdded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tracker_serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tracker_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackerAdded::ArenaDtor(void* object) {
  TrackerAdded* _this = reinterpret_cast< TrackerAdded* >(object);
  (void)_this;
}
void TrackerAdded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackerAdded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackerAdded::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.TrackerAdded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracker_serial_.ClearToEmpty();
  tracker_name_.ClearToEmpty();
  ::memset(&tracker_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracker_role_) -
      reinterpret_cast<char*>(&tracker_id_)) + sizeof(tracker_role_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackerAdded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tracker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tracker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tracker_serial = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tracker_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "messages.TrackerAdded.tracker_serial"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tracker_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tracker_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "messages.TrackerAdded.tracker_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tracker_role = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          tracker_role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackerAdded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.TrackerAdded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tracker_id = 1;
  if (this->_internal_tracker_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tracker_id(), target);
  }

  // string tracker_serial = 2;
  if (!this->_internal_tracker_serial().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracker_serial().data(), static_cast<int>(this->_internal_tracker_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "messages.TrackerAdded.tracker_serial");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tracker_serial(), target);
  }

  // string tracker_name = 3;
  if (!this->_internal_tracker_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracker_name().data(), static_cast<int>(this->_internal_tracker_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "messages.TrackerAdded.tracker_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tracker_name(), target);
  }

  // int32 tracker_role = 4;
  if (this->_internal_tracker_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tracker_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messages.TrackerAdded)
  return target;
}

size_t TrackerAdded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.TrackerAdded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tracker_serial = 2;
  if (!this->_internal_tracker_serial().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracker_serial());
  }

  // string tracker_name = 3;
  if (!this->_internal_tracker_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracker_name());
  }

  // int32 tracker_id = 1;
  if (this->_internal_tracker_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tracker_id());
  }

  // int32 tracker_role = 4;
  if (this->_internal_tracker_role() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tracker_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackerAdded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackerAdded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackerAdded::GetClassData() const { return &_class_data_; }

void TrackerAdded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackerAdded *>(to)->MergeFrom(
      static_cast<const TrackerAdded &>(from));
}


void TrackerAdded::MergeFrom(const TrackerAdded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.TrackerAdded)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tracker_serial().empty()) {
    _internal_set_tracker_serial(from._internal_tracker_serial());
  }
  if (!from._internal_tracker_name().empty()) {
    _internal_set_tracker_name(from._internal_tracker_name());
  }
  if (from._internal_tracker_id() != 0) {
    _internal_set_tracker_id(from._internal_tracker_id());
  }
  if (from._internal_tracker_role() != 0) {
    _internal_set_tracker_role(from._internal_tracker_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackerAdded::CopyFrom(const TrackerAdded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.TrackerAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerAdded::IsInitialized() const {
  return true;
}

void TrackerAdded::InternalSwap(TrackerAdded* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tracker_serial_, lhs_arena,
      &other->tracker_serial_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tracker_name_, lhs_arena,
      &other->tracker_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackerAdded, tracker_role_)
      + sizeof(TrackerAdded::tracker_role_)
      - PROTOBUF_FIELD_OFFSET(TrackerAdded, tracker_id_)>(
          reinterpret_cast<char*>(&tracker_id_),
          reinterpret_cast<char*>(&other->tracker_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerAdded::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtobufMessages_2eproto_getter, &descriptor_table_ProtobufMessages_2eproto_once,
      file_level_metadata_ProtobufMessages_2eproto[4]);
}

// ===================================================================

TrackerStatus_ExtraEntry_DoNotUse::TrackerStatus_ExtraEntry_DoNotUse() {}
TrackerStatus_ExtraEntry_DoNotUse::TrackerStatus_ExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TrackerStatus_ExtraEntry_DoNotUse::MergeFrom(const TrackerStatus_ExtraEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TrackerStatus_ExtraEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtobufMessages_2eproto_getter, &descriptor_table_ProtobufMessages_2eproto_once,
      file_level_metadata_ProtobufMessages_2eproto[5]);
}

// ===================================================================

class TrackerStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackerStatus>()._has_bits_);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrackerStatus::TrackerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extra_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messages.TrackerStatus)
}
TrackerStatus::TrackerStatus(const TrackerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extra_.MergeFrom(from.extra_);
  ::memcpy(&tracker_id_, &from.tracker_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&tracker_id_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:messages.TrackerStatus)
}

inline void TrackerStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tracker_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&tracker_id_)) + sizeof(confidence_));
}

TrackerStatus::~TrackerStatus() {
  // @@protoc_insertion_point(destructor:messages.TrackerStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrackerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrackerStatus::ArenaDtor(void* object) {
  TrackerStatus* _this = reinterpret_cast< TrackerStatus* >(object);
  (void)_this;
  _this->extra_. ~MapField();
}
inline void TrackerStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TrackerStatus::ArenaDtor);
  }
}
void TrackerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.TrackerStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_.Clear();
  ::memset(&tracker_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&tracker_id_)) + sizeof(status_));
  confidence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tracker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tracker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .messages.TrackerStatus.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::messages::TrackerStatus_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> extra = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extra_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .messages.TrackerStatus.Confidence confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_confidence(static_cast<::messages::TrackerStatus_Confidence>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackerStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.TrackerStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tracker_id = 1;
  if (this->_internal_tracker_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tracker_id(), target);
  }

  // .messages.TrackerStatus.Status status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // map<string, string> extra = 3;
  if (!this->_internal_extra().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "messages.TrackerStatus.ExtraEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "messages.TrackerStatus.ExtraEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_extra().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_extra().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extra().begin();
          it != this->_internal_extra().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TrackerStatus_ExtraEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extra().begin();
          it != this->_internal_extra().end(); ++it) {
        target = TrackerStatus_ExtraEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional .messages.TrackerStatus.Confidence confidence = 4;
  if (_internal_has_confidence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messages.TrackerStatus)
  return target;
}

size_t TrackerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.TrackerStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> extra = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extra_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_extra().begin();
      it != this->_internal_extra().end(); ++it) {
    total_size += TrackerStatus_ExtraEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 tracker_id = 1;
  if (this->_internal_tracker_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tracker_id());
  }

  // .messages.TrackerStatus.Status status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // optional .messages.TrackerStatus.Confidence confidence = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_confidence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrackerStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackerStatus::GetClassData() const { return &_class_data_; }

void TrackerStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrackerStatus *>(to)->MergeFrom(
      static_cast<const TrackerStatus &>(from));
}


void TrackerStatus::MergeFrom(const TrackerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.TrackerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extra_.MergeFrom(from.extra_);
  if (from._internal_tracker_id() != 0) {
    _internal_set_tracker_id(from._internal_tracker_id());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_confidence()) {
    _internal_set_confidence(from._internal_confidence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackerStatus::CopyFrom(const TrackerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.TrackerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerStatus::IsInitialized() const {
  return true;
}

void TrackerStatus::InternalSwap(TrackerStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_.InternalSwap(&other->extra_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackerStatus, confidence_)
      + sizeof(TrackerStatus::confidence_)
      - PROTOBUF_FIELD_OFFSET(TrackerStatus, tracker_id_)>(
          reinterpret_cast<char*>(&tracker_id_),
          reinterpret_cast<char*>(&other->tracker_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtobufMessages_2eproto_getter, &descriptor_table_ProtobufMessages_2eproto_once,
      file_level_metadata_ProtobufMessages_2eproto[6]);
}

// ===================================================================

class ProtobufMessage::_Internal {
 public:
  static const ::messages::Position& position(const ProtobufMessage* msg);
  static const ::messages::UserAction& user_action(const ProtobufMessage* msg);
  static const ::messages::TrackerAdded& tracker_added(const ProtobufMessage* msg);
  static const ::messages::TrackerStatus& tracker_status(const ProtobufMessage* msg);
};

const ::messages::Position&
ProtobufMessage::_Internal::position(const ProtobufMessage* msg) {
  return *msg->message_.position_;
}
const ::messages::UserAction&
ProtobufMessage::_Internal::user_action(const ProtobufMessage* msg) {
  return *msg->message_.user_action_;
}
const ::messages::TrackerAdded&
ProtobufMessage::_Internal::tracker_added(const ProtobufMessage* msg) {
  return *msg->message_.tracker_added_;
}
const ::messages::TrackerStatus&
ProtobufMessage::_Internal::tracker_status(const ProtobufMessage* msg) {
  return *msg->message_.tracker_status_;
}
void ProtobufMessage::set_allocated_position(::messages::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messages::Position>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    message_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:messages.ProtobufMessage.position)
}
void ProtobufMessage::set_allocated_user_action(::messages::UserAction* user_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (user_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messages::UserAction>::GetOwningArena(user_action);
    if (message_arena != submessage_arena) {
      user_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_action, submessage_arena);
    }
    set_has_user_action();
    message_.user_action_ = user_action;
  }
  // @@protoc_insertion_point(field_set_allocated:messages.ProtobufMessage.user_action)
}
void ProtobufMessage::set_allocated_tracker_added(::messages::TrackerAdded* tracker_added) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (tracker_added) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messages::TrackerAdded>::GetOwningArena(tracker_added);
    if (message_arena != submessage_arena) {
      tracker_added = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracker_added, submessage_arena);
    }
    set_has_tracker_added();
    message_.tracker_added_ = tracker_added;
  }
  // @@protoc_insertion_point(field_set_allocated:messages.ProtobufMessage.tracker_added)
}
void ProtobufMessage::set_allocated_tracker_status(::messages::TrackerStatus* tracker_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (tracker_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messages::TrackerStatus>::GetOwningArena(tracker_status);
    if (message_arena != submessage_arena) {
      tracker_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracker_status, submessage_arena);
    }
    set_has_tracker_status();
    message_.tracker_status_ = tracker_status;
  }
  // @@protoc_insertion_point(field_set_allocated:messages.ProtobufMessage.tracker_status)
}
ProtobufMessage::ProtobufMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messages.ProtobufMessage)
}
ProtobufMessage::ProtobufMessage(const ProtobufMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kPosition: {
      _internal_mutable_position()->::messages::Position::MergeFrom(from._internal_position());
      break;
    }
    case kUserAction: {
      _internal_mutable_user_action()->::messages::UserAction::MergeFrom(from._internal_user_action());
      break;
    }
    case kTrackerAdded: {
      _internal_mutable_tracker_added()->::messages::TrackerAdded::MergeFrom(from._internal_tracker_added());
      break;
    }
    case kTrackerStatus: {
      _internal_mutable_tracker_status()->::messages::TrackerStatus::MergeFrom(from._internal_tracker_status());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:messages.ProtobufMessage)
}

inline void ProtobufMessage::SharedCtor() {
clear_has_message();
}

ProtobufMessage::~ProtobufMessage() {
  // @@protoc_insertion_point(destructor:messages.ProtobufMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtobufMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void ProtobufMessage::ArenaDtor(void* object) {
  ProtobufMessage* _this = reinterpret_cast< ProtobufMessage* >(object);
  (void)_this;
}
void ProtobufMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtobufMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtobufMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:messages.ProtobufMessage)
  switch (message_case()) {
    case kPosition: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.position_;
      }
      break;
    }
    case kUserAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.user_action_;
      }
      break;
    }
    case kTrackerAdded: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.tracker_added_;
      }
      break;
    }
    case kTrackerStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.tracker_status_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ProtobufMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.ProtobufMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .messages.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .messages.UserAction user_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .messages.TrackerAdded tracker_added = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracker_added(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .messages.TrackerStatus tracker_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracker_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.ProtobufMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .messages.Position position = 1;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .messages.UserAction user_action = 2;
  if (_internal_has_user_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_action(this), target, stream);
  }

  // .messages.TrackerAdded tracker_added = 3;
  if (_internal_has_tracker_added()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tracker_added(this), target, stream);
  }

  // .messages.TrackerStatus tracker_status = 4;
  if (_internal_has_tracker_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tracker_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messages.ProtobufMessage)
  return target;
}

size_t ProtobufMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.ProtobufMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .messages.Position position = 1;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.position_);
      break;
    }
    // .messages.UserAction user_action = 2;
    case kUserAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.user_action_);
      break;
    }
    // .messages.TrackerAdded tracker_added = 3;
    case kTrackerAdded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.tracker_added_);
      break;
    }
    // .messages.TrackerStatus tracker_status = 4;
    case kTrackerStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.tracker_status_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtobufMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufMessage::GetClassData() const { return &_class_data_; }

void ProtobufMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtobufMessage *>(to)->MergeFrom(
      static_cast<const ProtobufMessage &>(from));
}


void ProtobufMessage::MergeFrom(const ProtobufMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messages.ProtobufMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kPosition: {
      _internal_mutable_position()->::messages::Position::MergeFrom(from._internal_position());
      break;
    }
    case kUserAction: {
      _internal_mutable_user_action()->::messages::UserAction::MergeFrom(from._internal_user_action());
      break;
    }
    case kTrackerAdded: {
      _internal_mutable_tracker_added()->::messages::TrackerAdded::MergeFrom(from._internal_tracker_added());
      break;
    }
    case kTrackerStatus: {
      _internal_mutable_tracker_status()->::messages::TrackerStatus::MergeFrom(from._internal_tracker_status());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufMessage::CopyFrom(const ProtobufMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.ProtobufMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufMessage::IsInitialized() const {
  return true;
}

void ProtobufMessage::InternalSwap(ProtobufMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProtobufMessages_2eproto_getter, &descriptor_table_ProtobufMessages_2eproto_once,
      file_level_metadata_ProtobufMessages_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::messages::PingPong* Arena::CreateMaybeMessage< ::messages::PingPong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messages::PingPong >(arena);
}
template<> PROTOBUF_NOINLINE ::messages::Position* Arena::CreateMaybeMessage< ::messages::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messages::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::messages::UserAction_ActionArgumentsEntry_DoNotUse* Arena::CreateMaybeMessage< ::messages::UserAction_ActionArgumentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messages::UserAction_ActionArgumentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::messages::UserAction* Arena::CreateMaybeMessage< ::messages::UserAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messages::UserAction >(arena);
}
template<> PROTOBUF_NOINLINE ::messages::TrackerAdded* Arena::CreateMaybeMessage< ::messages::TrackerAdded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messages::TrackerAdded >(arena);
}
template<> PROTOBUF_NOINLINE ::messages::TrackerStatus_ExtraEntry_DoNotUse* Arena::CreateMaybeMessage< ::messages::TrackerStatus_ExtraEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messages::TrackerStatus_ExtraEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::messages::TrackerStatus* Arena::CreateMaybeMessage< ::messages::TrackerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messages::TrackerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::messages::ProtobufMessage* Arena::CreateMaybeMessage< ::messages::ProtobufMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messages::ProtobufMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
